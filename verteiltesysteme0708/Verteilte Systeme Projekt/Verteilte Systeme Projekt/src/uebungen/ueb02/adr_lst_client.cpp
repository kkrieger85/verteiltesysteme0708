/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "adr_lst.h"
#include <iostream>

using namespace std;

/* Abfragefunktion. */
void
adr_lst_1(char *host)
{
	CLIENT *clnt;
	int* result_1;
	adr_lst_auth_data adr_lst_auth_1_arg;
	adr_lst_query_result* result_2;
	int* result_3;
	int handle;
   

   /* Verbindung aufbauen. */
   
	clnt = clnt_create (host, ADR_LST, ONE, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
   
   
   /* Benutzername & Passwort einlesen. */
   
   cout << "Benutzername? ";
   cin >> adr_lst_auth_1_arg.username;
   
   cout << "Passwort? ";
   cin >> adr_lst_auth_1_arg.passwd;
   
   
   /* Login durchfuehren. */

	result_1 = adr_lst_auth_1(&adr_lst_auth_1_arg, clnt);
   
	if (result_1 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	} else {
      handle = *result_1;
      
      if (handle == -1) {
         cerr << "Login denied" << endl;
      } else {
         
         /* Abfrage durchfuehren. */
         
         result_2 = adr_lst_query_1(&handle, clnt);

         if (result_2 == (adr_lst_query_result *) NULL) {
            clnt_perror (clnt, "call failed");
         } else {
            if (result_2->error != 0) {
               cerr << "Query error: " << result_2->error << endl;
            } else {
               cout << "Query result: " << result_2->result << endl;
            }
         }
         
         
         /* Abmeldung durchfuehren. */
         
         result_3 = adr_lst_logoff_1(&handle, clnt);
         if (result_3 == (int *) NULL) {
            clnt_perror (clnt, "call failed");
         } else {
            int error = *result_3;
            
            if (error)
               cout << "Logout failed" << endl;
         }
      }
   }   
   
	clnt_destroy (clnt);
}


/* Mainfunktion. Ruft die Abfragefunktion fuer den angegebenen Server auf.
 */
int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
   
	host = argv[1];
	adr_lst_1 (host);
   exit (0);
}
